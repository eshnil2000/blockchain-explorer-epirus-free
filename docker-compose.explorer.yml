#docker network create -d overlay --attachable traefik_default
# save sensitive variables in .env file
#validate config using : docker-compose -f docker-compose.traefik-labs.yml config
# env $(cat .env | grep ^[A-Z] | xargs) docker stack deploy -c docker-compose.explorer.yml explorer
#https://thenewstack.io/tutorial-create-a-docker-swarm-with-persistent-storage-using-glusterfs/

version: '3.2'
networks:
    traefik_default:
      driver: overlay
      external:
        name:  traefik_default
    backend:

services:
    api:
        image: web3labs/epirus-free-api:latest
        environment:
          - NODE_ENDPOINT=${NODE_ENDPOINT}
          - MONGO_CLIENT_URI=mongodb://mongodb:27017
          - REINDEX_ENDPOINT=http://ingestion/reindex/
          - MONGO_DB_NAME=epirus
        depends_on:
          - mongodb
        networks:
          - traefik_default
    
    mongodb:
        image: mongo:latest
        entrypoint: mongod --logpath=/dev/null --bind_ip "0.0.0.0"
        networks:
            - traefik_default
        
        deploy:
            labels:
                # The labels are usefull for Traefik only
                - "traefik.enable=true"
                - "traefik.docker.network=traefik_default"
                # Get the routes from http
                - "traefik.http.routers.mongodb.rule=Host(`mongodb.${DOMAIN_NAME}`)"
                - "traefik.http.routers.mongodb.entrypoints=web"
                # Redirect these routes to https
                - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
                - "traefik.http.routers.mongodb.middlewares=redirect-to-https@docker"
                # Get the routes from https
                - "traefik.http.routers.mongodb-secure.rule=Host(`mongodb.${DOMAIN_NAME}`)"
                - "traefik.http.routers.mongodb-secure.entrypoints=websecure"
                # Apply autentificiation with http challenge
                - "traefik.http.routers.mongodb-secure.tls=true"
                #- "traefik.http.routers.ganachecli-secured.tls.certresolver=myhttpchallenge"
                - "traefik.http.services.mongodb.loadbalancer.server.port=27017"
                - "traefik.http.routers.mongodb-secure.service=mongodb"
                #- "traefik.http.services.ganachecli.loadbalancer.swarm=true"

    web:
        image: web3labs/epirus-free-web:latest
        environment:
            - API_URL=/api
        depends_on:
            - api
        networks:
            - traefik_default
        
    ingestion:
        image: web3labs/epirus-free-ingestion:latest
        environment:
            - NODE_ENDPOINT=${NODE_ENDPOINT}
            - MONGO_CLIENT_URI=mongodb://mongodb:27017
            - MONGO_DB_NAME=epirus
        depends_on:
            - mongodb
        networks:
            - traefik_default

    nginx:
        image: nginx:latest
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf
            - ./5xx.html:/www/error_pages/5xx.html
        networks:
            - traefik_default
        depends_on:
            - api
            - web
        deploy:
            labels:
                # The labels are usefull for Traefik only
                - "traefik.enable=true"
                - "traefik.docker.network=traefik_default"
                # Get the routes from http
                - "traefik.http.routers.nginx.rule=Host(`benchopsexplorer.${DOMAIN_NAME}`)"
                - "traefik.http.routers.nginx.entrypoints=web"
                # Redirect these routes to https
                - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
                - "traefik.http.routers.nginx.middlewares=redirect-to-https@docker"
                # Get the routes from https
                - "traefik.http.routers.nginx-secure.rule=Host(`benchopsexplorer.${DOMAIN_NAME}`)"
                - "traefik.http.routers.nginx-secure.entrypoints=websecure"
                # Apply autentificiation with http challenge
                - "traefik.http.routers.nginx-secure.tls=true"
                #- "traefik.http.routers.ganachecli-secured.tls.certresolver=myhttpchallenge"
                - "traefik.http.services.nginx.loadbalancer.server.port=80"
                - "traefik.http.routers.nginx-secure.service=nginx"
                #- "traefik.http.services.ganachecli.loadbalancer.swarm=true"
                
    
    